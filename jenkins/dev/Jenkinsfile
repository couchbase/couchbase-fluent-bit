/**
 * One pipeline to rule them all...
 * Warning, this belongs to development and must be fast and stable, do not modify without
 * good reason!
 */
pipeline {
  agent any

  options {
    timestamps()

    // Discard any stale builds so we don't fill up the disk.
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '30',
        artifactNumToKeepStr: '50',
        daysToKeepStr: '30',
        numToKeepStr: '50',
      )
    )

    // We only have a single cluster for now, control concurrency with other runs of this
    // job, or another job with a reservation on a global lockable resource.
    lock resource: 'gke-cluster-couchbase-operator'
  }

  parameters {
    string(name: 'refspec', defaultValue: 'refs/heads/main', description: 'Gerrit ref spec of your source tree for fluent bit')
    string(name: 'refspec-operator', defaultValue: 'refs/heads/master', description: 'Gerrit ref spec of your source tree for CAO')
    choice(name: 'suites', choices: ['', 'TestLogging', 'p0', 'p0 p1'], description: 'Any additional suites to run (validation and sanity are mandatory)')
    string(name: 'features', defaultValue: 'logging', description: 'Much like a suite, these feature sets allow functional area testing e.g. "backup"')
    string(name: 'tests', defaultValue: '', description: 'Any custom tests to run, this is a space delimited list of tests names e.g. "TestCreateCluster TestCreateBucketCluster"')
    // Rest are options for the tests
    string(name: 'server_image', defaultValue: 'couchbase/server:6.6.2', , description: 'Version of Couchbase to test')
    string(name: 'server_image_upgrade', defaultValue: 'couchbase/server:6.6.1', description: 'Version of Couchbase to upgrade from')
    string(name: 'backup_image', defaultValue: 'spjmurray/couchbase-operator-backup:6.6.0-30c56e6e2a29fbef594ecdd588085547fa901a4f', description: 'Version of the Couchbase backup image to test')
    string(name: 'exporter_image', defaultValue: 'couchbase/exporter:1.0.3', description: 'Version of the Prometheus exporter to test')
    string(name: 'exporter_image_upgrade', defaultValue: 'couchbase/exporter:1.0.3', description: 'Version of the Prometheus exporter to upgrade from')
    string(name: 'mobile_image', defaultValue: 'couchbase/sync-gateway:2.8.2-enterprise', description: 'Version of Sync-Gateway to test')
    choice(name: 'bucket_type', choices: ['couchbase', 'ephemeral', 'memcached'], description: 'Bucket type to test with, for tests where bucket type is dynamic')
    choice(name: 'compression_mode', choices: ['passive', 'active', 'off'], description: 'Bucket compression to test with, for tests where compression is dynamic')
  }

  environment {
    GOVERSION = '1.16.3'
    GOROOT = "${env.WORKSPACE}/go"
    PATH = "${env.WORKSPACE}/go/bin:${env.WORKSPACE}/kind/bin:$PATH"
    DOCKER_CREDENTIALS = credentials('dockerhub-couchbaseqe')
    GCLOUD_SERVICE_TOKEN = credentials('google-cloud-couchbase-operator')
  }

  stages {
    stage('Build Name') {
      steps {
        // The build name must be unique, or the JUnit trend will crap out.
        buildName "#${BUILD_NUMBER} ${sh(script: 'git log --oneline --format=%B HEAD | head -n 1', returnStdout: true)}"
        buildDescription "Patchset: ${params.refspec.split('/').last()}"
      }
    }

    stage('Checkout operator') {
      steps {
        dir('operator-repo') {
          git branch: 'master', url: 'ssh://review.couchbase.org:29418/couchbase-operator', credentialsId: 'gerrit-couchbaseqe'
        }
      }
    }

    stage('Install Go') {
      steps {
        sh 'wget -q -O- https://dl.google.com/go/go${GOVERSION}.linux-amd64.tar.gz | tar xz'
      }
    }

    // TODO: convert to matrix build at some point to support variants in each repo
    stage('Build Container Images') {
      steps {
        sh 'docker login -u ${DOCKER_CREDENTIALS_USR} -p ${DOCKER_CREDENTIALS_PSW}'
        sh 'make container-public -e DOCKER_USER=${DOCKER_CREDENTIALS_USR} DOCKER_TAG=${GIT_COMMIT}'
        dir('operator-repo') {
          sh 'make touch-generated && make'
          sh 'make container-public -e DOCKER_USER=${DOCKER_CREDENTIALS_USR} DOCKER_TAG=${GIT_COMMIT}'
        }
      }
      post {
        always {
          // Remove old docker images now, this stops disk from filling up and minimises risk
          // of this not being called due to a job cancellation.
          sh 'make container-clean -e DOCKER_USER=${DOCKER_CREDENTIALS_USR} DOCKER_TAG=${GIT_COMMIT}'
          dir('operator-repo') {
            sh 'make container-clean -e DOCKER_USER=${DOCKER_CREDENTIALS_USR} DOCKER_TAG=${GIT_COMMIT}'
          }
        }
      }
    }

    stage('Install Google Cloud SDK') {
      steps {
        sh 'wget -q -O- https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-315.0.0-linux-x86_64.tar.gz | tar xz'
        sh './google-cloud-sdk/bin/gcloud components install kubectl'
        sh './google-cloud-sdk/bin/gcloud auth activate-service-account couchbase-operator@couchbase-engineering.iam.gserviceaccount.com --project couchbase-engineering --key-file ${GCLOUD_SERVICE_TOKEN}'
        sh 'KUBECONFIG=config1 ./google-cloud-sdk/bin/gcloud container clusters get-credentials couchbase-operator-ci --region us-east1'
        sh 'KUBECONFIG=config2 ./google-cloud-sdk/bin/gcloud container clusters get-credentials couchbase-operator-ci --region us-west1'
      }
    }

    stage('Acceptance Test') {
      steps {
        dir('operator-repo') {
          // Warn if something went wrong, but don't fail, it's probably just an unstable test/platform.
          warnError('Suite failed') {
            sh "go test github.com/couchbase/couchbase-operator/test/e2e -run TestOperator -v -race -timeout 12h -parallel 8 -args \
                -suite sanity \
                ${params.suites.split().collect{s -> '-suite ' + s}.join(' ')} \
                ${params.features.split().collect{s -> '-suite ' + s}.join(' ')}  \
                ${params.tests.split().collect{s -> '-test ' + s}.join(' ')} \
                -platform-type kubernetes \
                -logging-image \${DOCKER_CREDENTIALS_USR}/couchbase-operator:\${GIT_COMMIT} \
                -operator-image \${DOCKER_CREDENTIALS_USR}/couchbase-operator:\${GIT_COMMIT} \
                -admission-image \${DOCKER_CREDENTIALS_USR}/couchbase-operator-admission:\${GIT_COMMIT} \
                -mobile-image \${mobile_image} -server-image \${server_image} -server-image-upgrade \${server_image_upgrade} \
                -exporter-image \${exporter_image} -exporter-image-upgrade \${exporter_image_upgrade} -backup-image \${backup_image} \
                -storage-class dynamic-bound -bucket-type \${bucket_type} -compression-mode \${compression_mode} \
                -cluster \${WORKSPACE}/config1 -cluster \${WORKSPACE}/config2 \
                -registry https://index.docker.io/v1/,\${DOCKER_CREDENTIALS_USR},\${DOCKER_CREDENTIALS_PSW} \
                -collect-logs"
          }
        }
      }
    }
  }

  post {
    always {
      // Save JUnit results, this is what we will review.
      junit 'operator-repo/test/e2e/*.xml'

      // Archive any logs as an artifact, these may be needed to debug an issue.
      sh 'tar czf logs.tar.gz -C operator-repo/test/e2e/logs --exclude=\'*.zip\' .'
      archiveArtifacts artifacts: 'logs.tar.gz', fingerprint: true

      sh 'make clean'
      // Clean up the workspace to free disk space.
      cleanWs()
    }
  }
}
